Git
Everything here is based off of the following tutorial
https://www.atlassian.com/git/tutorials/setting-up-a-repository

git init
transforms current directory into a Git repository. 

git init <directory>
Creates an empty Git repository in the specified directory

git init --bare <directory>
Initialize an empty Git, but omit the working directory. Should always create shared repositories with the --bare flag

git clone <repo>
Clone the repository located at <repo> onto the local machine. The original repository can be located on the local filesystem or on a remote machine accessible via HTTP or SSH

git clone <repo> <directory>
Clone the repository located at <repo> into the folder called <directory> on the local machine
    If the directory you want to clone into is not empty you may have to set up symbolic links to achieve the desired functionality.


git config user.name <name>
Define the author name to be used for all commits in the current repository.

git config --global user.name <name>
Define the author name to be used for all commits by the current user.

git config --global user.email <email>
Define the author email to be used for all commits by the current user.

git config --global alias. <alias-name> <git-command>
Create a shortcut for a git command.

git config --system core.editor <editor>
Define the text editor used by command like git commit for all users on the current machine. The <editor> argument should be the command that launches the desired editor.

git add
Adds change in the working directory to the staging area.

git add <file>
Stage all changes in <file> for the next commit. 

git add <directory>
Stage all changes in <directory> for the next commit.

git add -p
Begin an interactive staging session that lets you choose portions of a file to add to the next commit. This will present you with a chunk of changes and prompt you for a command. Use y to stage the chunk, n to ignore the chunk, s to split it into smaller chunks, e to manually edit the chunk, and q to exit.

git commit
Commit the stages snapshot. This will launch a text editor prompting you for a commit message. After you’ve entered a message, save the file and close the editor to create the actual commit.

git commit -m “<message>”
Commit the staged snapshot, but instead of launching a text editor, use <message> as the commit message.

git commit -a
Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files (those that have been added with git add at some point in their history).

git commit --amend
Commit the staged changes. Hold onto the previous commit message.

Snapshots are always committed to the local repository.

Snapshots record the entire contents of each file in every commit.

git status
List which files are staged, unstaged, and untracked.

git diff
Show what is different about files that changed in your working directory

git diff --cached
Show what is different about files that are staged vs latest commit

git diff master..mybranch -- filename
diff file between branches. omitting a branch name substitutes HEAD

git difftool -t vimdiff filename
use specified diff tool to do the diff

.gitignore file
include *.pyc to prevent compiled Python modules from appearing in git status.

git log
display the entire commit history using the default formatting. Space to scroll and q to exit.

git log -n <limit>
Limit the number of commits by <limit>.

git log --oneline
Condense each commit to a single line.

git log --stat
Include which files were altered and the relative number of lines that were added or deleted from each of them.

git log -p
Display the patch representing each commit. This shows the full diff of each commit, which is the most detailed view you can have of your project history.

git log --author=“<pattern>”
Search for commits by a particular author. <pattern> can be a plain string or a regular expression.

git log --grep=“<patter>”
search for commits with a commit message that matches <pattern>, which can be a plain string or a regular expression.

git log <since>..<until>
show only commits that occur between <since> and <until>. Both arguments can be either a commit ID, a branch name, HEAD, or any other kind of revision reference.

git log <file>
Only display commits that include the specified file.

git log --graph --decorate --oneline
a few useful options to consider. The --graph flag that will draw a text based graph of the commits on the left hand side of the commit. --decorate adds the names of branches or tags of the commits that are shown. --online shows the commit information on a single line.

The git checkout command serves three distinct functions: checking out files, checking out commits, and checking out branches.

git checkout master
Return to the master branch

git checkout <commit>
Update all files in the working directory to match the specified commit.You can use either a commit hash or a tag as the <commit> argument. This will put you in a detached HEAD state.

git checkout <commit> <file>
Fetch an old version of a file. This affects the current state of your project. The old file version will show up as “change to be committed”.

git checkout HEAD <file>
Check out most recent version of a file.

git revert <commit>
Generate a new commit that undoes all of the changes introduced in <commit>, then apply it to the current brach

git reset should be used exclusively with local changes. Any commit that has been published on a public repository should be removed with revert.

git reset <file>
Remove the specified file from the staging area, but leaves the working directory unchanged. This upstages a file without overwriting any changes.

git reset
Reset the staging area to match the most recent commit, but leave the working directory unchanged. This upstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch

git reset --hard
Reset the staging area and the working directory to match the most recent commit. Obliterates all uncommitted changes.

git reset <commit>
Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone. All changes made since <commit> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots.

git reset --hard <commit>
Move the current branch tip backward to <commit> and reset both the staging area and the working directory to match. This obliterates not only the uncommitted changes, but all commits after <commit>, as well

git clean
remove untracked files from your directory

git clean -n
Shows you which files are going to be removed without actually doing it.

git clean -f 
The -f (force) flag is required unless the clean.requireForce configuration options is set to false (it’s true by default). This will not remove untracked folders or files specified by .gitignore.

git clean -f <path>
remove untracked files, but limit the operation to the specified path.

git clean -df
Remove untracked files and untracked directories from the current directory

git clean -xf
Remove untracked files from the current directory as well as any files that Git usually ignores.

Don’t amend public commits

git commit --amend
Lets  you combine staged changes with the previous commit instead of committing it as an entirely new snapshot. Can also be used to edit the previous commit message without changing its snapshot.

git commit --amend --no-edit
Amend your commit without changing its commit message.

git rebase is the process of moving a branch to a new base commit.

git rebase <base>
Rebase the current branch onto <base>, which can be any kind of commit reference (an ID, a branch name, a tag, or a relative reference to HEAD).

Rebasing is a common way to integrate upstream changes into your local repository. Pulling in upstream changes with git merge results in a superfluous merge commit every time you want to see how the project has progressed. On the other hand, rebasing is like saying, “I want to base my changes on what everybody has already done.”

Don’t rebase public history. The rebase would replace the old commits with new ones.

##################################################
Git rebase and merge example
# start a new feature
git checkout -b new-feature master
# edit files
git commit -a -m “Start developing a feature”

In the middle of our feature, we realize there’s a security hole in our project
# Create a hot fix branch based off of master
git checkout -b hot fix master
# Edit files
git commit -a -m “Fix security hole”
# Merge back into master
git checkout master
git merge hot fix
git branch -d hotfix

After merging the hotfix into master, we have a forked project history. Instead of a plain git merge, we’ll integrate the feature branch with a rebase to maintain a linear history:

git checkout new-feature
git rebase master

This moves new-feature to the tip of master, which lets us do a standard fast-forward merge from master

git checkout master
git merge new-feature
##################################################

git rebase -i <base>
Rebase the current branch onto <base>, but use an interactive rebasing session. This opens an editor where you can enter commands for each commit to be rebased. These commands determine how individual commits will be transferred to the new base. You can also reorder the commit listing to change the order of the commits themselves.

The reflog contains information about the old state of branches and allows you to go back to that state if necessary. Every time the current HEAD gets updated (by switching branches, pulling in new changes, rewriting history or simply by adding new commits) a new entry will be added to the reflog.

git reflog
Show the reflow for the local repository. 

undoing bad rebases, etc
git checkout branch
git reflog
git reset --hard <commit>

git reflow --relative-date
Show the reflow with the relative date information

The git remote lets you create, view, and delete connections to other repositories. Remote connections are more like bookmarks rather than direct links into other repositories. Instead of providing real-time access to another repository, they serve as convenient names that can be used to reference a not-so-convenient url.

gir remote
List the remote connections you have to other repositories. 
 
git remote -v
Same as git remote, but include the URL of each connection

git remote add <name> <url>
Create a new connection to a remote repository. After adding a remote, you’ll be able to use <name> as a convenient shortcut for <url> in other Git commands.

git remote rm <name>
Remove the connection to the remote repository called <name>.

git remote rename <old-name> <new-name>
Rename a remote connection from <old-name> to <new-name>

The origin remote
When you clone a repository with git clone, it automatically creates a remote connection called origin pointing back to the cloned repository. This is useful for developers creating a local copy of a central repository, since it provides an easy way to pull upstream changes or publish local commits. This is also why most Git-based projects call their central repository origin.

Repository URLs
Git supports many ways to reference a remote repository. Two of the easiest ways to access a remote repo are via the HTTP and the SSH protocols. HTTP is an easy way to allow anonymous, read-only access to a repository. For example:
http://host/path/to/repo.git
But, it’s generally not possible to push commits to an HTTP address (you wouldn’t want to allow anonymous pushes anyways). For reald-write access, you should use SSH instead:
ssh://user@host/path/to/repo.git
You’ll need a valid SSH account on the host machine, but other than that, Git supports authenticated access via SSH out of the box.

The git fetch command imports commits form a remote repository into your local repo. The resulting commits are stored as remote branches instead of the normal local branches that we’ve been working with. This gives you a chance to review changes before integrating them into your copy of the project.

git fetch <remote>
Fetch all of the branches from the repository. This also downloads all of the required commits and files from the other repository.

git fetch <remote> <branch>
Same as the above command, but only fetch the specified branch.

git branch -r
View all branches including your remote ones

##################################################
This example walks through the typical workflow for synchronizing your local repository with the central repository’s master branch.

git fetch origin

This will display the branches that were downloaded:

a1e8fb5..45e66a4 master -> origin/master
a1e8fb5..9e8ab1c develop -> origin/develop
* [new branch] some-feature -> origin/some-feature

To see what commits have been added to the upstream master, you can run a git log using origin/master as a filter

git log --oneline master..origin/master

To approve the changes and merge them into your local master branch with the following commands:

git checkout master
git log origin/master

Then we can use git merge origin/master

git merge origin/master

The origin/master and master branches now point to the same commit, and you are synchronized with the upstream developments.
##################################################

Merging upstream changes into your local repository is a common task in Git-based collaboration workflows. We already know how to do this with git fetch followed by git merge, but git pull rolls this into a single command

git pull <remote>
Fetch the specified remote’s copy of the current branch and immediately merge it into the local copy. This is the same as git fetch <remote> followed by 
git merge origin/<current-branch>

git pull --rebase <remote>
Same as git pull, but instead of using git merge to integrate the remote branch with the local one, use git rebase.

Pushing is how you transfer commits from your local repository to a remote repo. It’s the counterpart to git fetch, but whereas fetching imports commits to local branches, pushing exports commits to remote branches. This has the potential to overwrite changes, so you need to be careful how you use it.

git push <remote> <branch>
Push the specified branch to <remote>, along with all of the necessary commits and internal objects. This creates a local branch in the destination repository. To prevent you from overwriting commits, Git won’t let you push when it results in a non-fast-forward merge in the destination repository.

git push <remote> --force
Same as git push, but force the push even if it results in a non-fast-forward merge. 

git push <remote> --all
Push all of your local branches to the specified remote.

git push <remote> --tags
Tags are not automatically pushed when you push a branch or use the --all option. The --tags flag sends all of your local tags to the remote repository.

Only push to bare repositories.

git branch
List all of the branches in your repository

git branch <branch>
Creates a new branch called <branch>. This does not check out the new branch.

git branch -d <branch>
Delete the specified branch. This is a “safe” operation in that Git prevents you from deleting the branch if it has unmerited changes.

git branch -D <branch>
Force delete the specified branch, even if it has unmarked changes. This is the command to use if you want to permanently throw away all of the commits associated with a particular line of development.

git push -d <remote_name> <branch>
delete specified branch off remote

git branch -m <branch>
rename the current branch to <branch>

Branches are just pointers to commits. When you create a branch, all Git needs to do is create a new pointer.

The git checkout command lets you navigate between the branches created by git branch. Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch. Think of it as a way to select which line of development you’re working on.

git checkout <existing-branch>
Check out the specified branch, which should have already been created with git branch. This makes <existing-branch> the current branch, and updates the working directory to match.

git checkout -b <new-branch>
Create and check out <new-branch>. The -b option is a convenience flag that tells Git to run git branch <new-branch> before running git checkout <new-branch>.

git checkout -b <new-branch> <existing-branch>
Same as the above invocation, but base the new branch off of <existing-branch> instead of the current branch.

The HEAD is Git’s way of referring to the current snapshot. Internally, the git checkout command simply updates the HEAD to point to either the specified branch or commit. When it points to a branch, Git doesn’t complain, but when you check out a commit, it switches into a “detached HEAD” state.
This is a warning telling you that everything you’re doing is “detached” from the rest of your project’s development. If you were to start developing a feature while in a detached HEAD state, there would be no branch allowing you to get back to it. When you inevitably check out another branch (e.g., to merge your feature in), there would be no way to reference your feature.
The point is, your development should always take place on a branch -- never on a detached HEAD. This makes sure you always have a reference to your new commits. However, if you’re just looking at an old commit, it doesn’t really matter if you’re in a detached HEAD state or not.

git checkout origin/master -- path/to/file
git checkout but only applied to a single file

git blame <file>
show who made the last change on each line of a file

git show <hash fragment>

git bisect
does a binary search to find which commit introduces a bug
https://git-scm.com/docs/git-bisect

git pull a specific pull request from a repo
git pull upstream pull/28/head

_________________________________________________
Git standard full workflow

1. Fork a repo sevntu-checkstyle/sevntu.checkstyle.
2. Clone the sevntu.checkstyle project to your local machine (username – your Github user account name.):
$ git://github.com/sevntu-checkstyle/sevntu.checkstyle.git

3. Configure remotes:
$ cd sevntu.checkstyle
$ git remote add nwkarste git@github.com:USERNAME/sevntu.checkstyle.git

4. Create a branch for new check:
$ git checkout -b my-new-check

5. Develop on my-new-check branch only, but Do not merge my-new-check branch to the your master (as it should stay equal to origin master)!!
6. Commit changes to my-new-check branch:
$ git add .
$ git commit -m "commit message"

7. Push branch to GitHub, to allow your mentor to review your code:
$ git push nwkarste my-new-check

8. Repeat steps 5-7 till development is complete.
9. Fetch upstream changes that were done by other contributors:
$ git fetch origin

10. Update local master:
$ git checkout master
$ git pull origin master
ATTENTION: any time you lost of track of your code – launch “gitk —all” in source folder, UI application come up that will show all branches and history in pretty view, explanation.
11. Rebase my-new-check branch on top of the origin master:
$ git checkout my-new-check
$ git rebase master

12. In the process of the rebase, it may discover conflicts. In that case it will stop and allow you to fix the conflicts. After fixing conflicts, use git add . to update the index with those contents, and then just run:
$ git rebase --continue

13. Push branch to GitHub (with all your final changes and actual code of sevntu.checkstyle):
We forcing changes to your issue branch(our sand box) is not common branch, and rebasing means recreation of commits so no way to push without force. NEVER force to common branch.
$ git push nwkarste my-new-check --force
14. Created build for testing and send it to any mentor for testing.
15. Only after all testing is done – Send a Pull Request.
Attention: Please recheck that in your pull request you send only your changes, and no other changes!!
Check it by command:
git diff my-new-check origin/master

git stash
git stash pop
git stash -u (includes untracked files)
git stash save everthing after is named
Stores the local changes

pull request on github is not updating after new commits are added
seems rare, but it happened.
from the pr > edit > base: master > master > confirm

pull down a pr branch
git fetch REMOTE pull/ID/head:BRANCHNAME

doing git stash but with diff and patch
git diff branch-name > file
patch -p1 < file

git delete all merged branches
git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d

how to only stage some changes in a file
git add -p

how to undo parts of a commit
git reset <previous commit hash> --soft
git reset -p
git commit

patch
       This lets you choose one path out of a status like selection. After choosing the path, it presents the diff between the index and the working tree file and asks you if you want to stage the change of each hunk. You can select one of the following options and type return:

           y - stage this hunk
           n - do not stage this hunk
           q - quit; do not stage this hunk nor any of the remaining ones
           a - stage this hunk and all later hunks in the file
           d - do not stage this hunk nor any of the later hunks in the file
           g - select a hunk to go to
           / - search for a hunk matching the given regex
           j - leave this hunk undecided, see next undecided hunk
           J - leave this hunk undecided, see next hunk
           k - leave this hunk undecided, see previous undecided hunk
           K - leave this hunk undecided, see previous hunk
           s - split the current hunk into smaller hunks
           e - manually edit the current hunk


remember merge conflict choices
git config rerere=true

forget bad rerere choice
rm -rf .git/rr-cache

vimdiff
git mergetool -t vimdiff
]c - move to next change
[c - move to previous change
ctrl + w - move between windows. helps with reading lines
:set mouse=a - allows clicking to change windows. can resize windows too
:do LO/RE/BA - same as :diffget. For this diff take the contents of the version
for more complex diffs get from one file and use yank and inserts on everything else
zr - expand collapsed section of diff
za - recreate folds. undoes zr
zR - expand all folds
zM - close all folds

Vocabulary 
Workspace - directory tree of source files you see and edit
Index - binary file in .git/index which lists all files in the current branch, their sha1 checksums, time stamps and the file name
local repository - directory .git including an objects directory containing all versions of every file in the repo (local branches and copies of remote branches) as a compressed file

Refs
Tags - fixed references that mark a specific point in history
Heads - moved to reflect the current position of project development

